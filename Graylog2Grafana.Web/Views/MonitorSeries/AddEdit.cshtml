@using Graylog.Grafana.Web.Models.Helpers;
@using Time.Series.Anomaly.Detection.Data.Models.Enums;
@using Time.Series.Anomaly.Detection.Data.Models;
@model MonitorSeries
@{
    var isEdit = Model != null && Model.ID > 0;
    ViewData["Title"] = isEdit ? "Edit" : "Create";

    List<SelectListItem> annotationTypes = EnumProvider<MonitorType>.GetValues(MonitorType.Downwards).Select(x => new SelectListItem { Text = x.Value, Value = x.Key.ToString() }).ToList();
}

<div class="row clearfix">
    <div class="col-12">
        <div class="card bg-dark">
            <div class="card-header">
                <h5 class="mb-0">
                    @(isEdit ? "Edit" : "New")  monitor query
                </h5>
            </div>
            <div class="card-body">
                @using (Html.BeginForm((isEdit ? "Edit" : "Create"), "MonitorSeries", new { id = (Model?.ID ?? 0) }, FormMethod.Post, true, new { role = "form" }))
                {
                    @Html.HiddenFor(m => m.ID)
                    <div class="row">
                        <div class="col-12 col-md-6 col-lg-6">
                            <div class="form-group">
                                <label for="Name" class="form-label mt-4">Name</label>
                                @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                                <div><small class="form-text text-muted">This is the name that will be available in Grafan. This is unique.</small></div>
                                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                <label for="Description" class="form-label mt-4">Description (optional)</label>
                                @Html.TextBoxFor(m => m.Description, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                <label for="Query" class="form-label mt-4">Query</label>
                                @Html.TextBoxFor(m => m.Query, new { @class = "form-control" })
                                <div><small class="form-text text-muted">The query to be monitored in Graylog.</small></div>
                                @Html.ValidationMessageFor(m => m.Query, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-12 col-md-6 col-lg-6">
                            <div class="form-group">
                                <label for="MonitorAnomalyType" class="form-label mt-4">Annotation type</label>
                                @Html.DropDownListFor(m => m.MonitorType, annotationTypes, null, new { @class = "form-control" })
                                <div><small class="form-text text-muted">Select which type of anomaly detection you wish to monitor.</small></div>
                                @Html.ValidationMessageFor(m => m.MonitorType, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                <label for="Sensitivity" class="form-label mt-4">Sensitivity</label>
                                @Html.TextBoxFor(m => m.Sensitivity, new { @class = "form-control", type = "number", min = "1", max = "100" })
                                <div><small class="form-text text-muted">From 1 to 100, select the sensitivity. The more, the easier to get alerted.</small></div>
                                @Html.ValidationMessageFor(m => m.Sensitivity, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                <label for="MinuteDurationForAnomalyDetection" class="form-label mt-4">Minute duration for anomaly detection</label>
                                @Html.TextBoxFor(m => m.MinuteDurationForAnomalyDetection, new { @class = "form-control", type = "number", min = "20", max = "1000" })
                                <div><small class="form-text text-muted">From 20 to 1000, how many of the latest minute metrics should be included in anomaly detection process.</small></div>
                                @Html.ValidationMessageFor(m => m.MinuteDurationForAnomalyDetection, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                <label for="LowerLimitToDetect" class="form-label mt-4">Lower limit (optional)</label>
                                @Html.TextBoxFor(m => m.LowerLimitToDetect, new { @class = "form-control", type = "number" })
                                <div><small class="form-text text-muted">Below that value, you will not be alerted, regarding down-trend anomalies.</small></div>
                                @Html.ValidationMessageFor(m => m.LowerLimitToDetect, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                <label for="UpperLimitToDetect" class="form-label mt-4">Upper limit (optional)</label>
                                @Html.TextBoxFor(m => m.UpperLimitToDetect, new { @class = "form-control", type = "number" })
                                <div><small class="form-text text-muted">Above that value, you will not be alerted, regarding up-trend anomalies.</small></div>
                                @Html.ValidationMessageFor(m => m.UpperLimitToDetect, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.ValidationMessage("CustomError", new { @class = "text-danger" })
                    </div>
                    <button type="submit" class="btn btn-primary mt-3" title="@(isEdit ? "Save" : "Create")">
                        <i class="bi bi-upload"></i>
                    </button>
                }
            </div>
        </div>
    </div>
</div>