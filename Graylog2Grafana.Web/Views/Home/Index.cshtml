@using Graylog2Grafana.Web.Models.Helpers;
@using System.Web
@using Time.Series.Anomaly.Detection.Data.Models.Enums;
@using Time.Series.Anomaly.Detection.Data.Models;
@model (List<MonitorSources> Sources, List<MonitorSeries> Series)
@{
    ViewData["Title"] = "Home Page";

    List<SelectListItem> sourceTypes = EnumProvider<SourceType>.GetValues(SourceType.Graylog).Select(x => new SelectListItem { Text = x.Value, Value = x.Key.ToString() }).ToList();
    List<SelectListItem> annotationTypes = EnumProvider<MonitorType>.GetValues(MonitorType.Downwards).Select(x => new SelectListItem { Text = x.Value, Value = x.Key.ToString() }).ToList();
}
<div class="mb-3 d-flex">
    <a type="button" class="btn btn-primary btn-sm me-auto" href="@Url.Action("Create", "MonitorSources")" title="New source"><i class="bi bi-plus-square"></i></a>
    <a type="button" class="btn btn-primary btn-sm" href="javascript:downloadFile('@Url.Action("ExportDefinitions", "MonitorSeries")', 'Graylog2Grafana_definitions.json')" title="Download definitions"><i class="bi bi-download"></i></a>
    <a type="button" class="btn btn-primary btn-sm ms-2" href="#" title="Upload definitions" data-bs-toggle="modal" data-bs-target="#modal_upload_definitions"><i class="bi bi-upload"></i></a>
</div>

@if (Model.Sources.Any())
{
    @foreach (var type in sourceTypes)
    {
        if (Model.Sources.Any(x => ((int)x.SourceType).ToString() == type.Value))
        {
            <div>
                <h4>
                    Source type
                    <small class="text-muted">@type.Text</small>
                </h4>
            </div>
            <table class="table table-hover mt-3 table-dark">
                <thead>
                    <tr>
                        <th scope="col">Enabled</th>
                        <th scope="col">Name</th>
                        <th scope="col">Source</th>
                        <th scope="col">Username</th>
                        <th scope="col">Password</th>
                        <th scope="col">Load interval</th>
                        <th scope="col" title="The value that below it, you will not be notified if any anomaly is detected">Detection delay</th>
                        <th scope="col" title="The value that above it, you will not be notified if any anomaly is detected">Data retention</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Sources.Where(x => ((int)x.SourceType).ToString() == type.Value))
                    {
                        <tr>
                            <th scope="row"><input type="checkbox" @(item.Enabled ? "checked='checked'" : "") class="checkbox readonly" /></th>
                            <th scope="row">@item.Name</th>
                            <td><a href="@(item.Source.Trim('/'))/search" style="text-decoration:none;" target="_blank">@item.Source</a></td>
                            <td>@(string.IsNullOrWhiteSpace(item.Username) ? "N/A" : item.Username)</td>
                            <td>@(string.IsNullOrWhiteSpace(item.Password) ? "N/A" : "*****")</td>
                            <td>@item.LoadDataIntervalSeconds seconds</td>
                            <td>@item.DetectionDelayInMinutes minutes</td>
                            <td>@item.DataRetentionInMinutes minutes</td>
                            <td>
                                <a type="button" title="Edit" class="btn btn-primary btn-sm" href="@Url.Action("Edit", "MonitorSources", new { id = item.ID })"><i class="bi bi-pencil-square"></i></a>
                            </td>
                            <td>
                                <a type="button" title="Delete" class="btn btn-danger btn-sm" href="@Url.Action("Delete", "MonitorSources", new { id = item.ID })"><i class="bi bi-trash"></i></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
}
else
{
    <div class="text-muted">No sources found</div>
}

<div class="mt-3 mb-3 d-flex">
    <a type="button" class="btn btn-primary btn-sm me-auto" href="@Url.Action("Create", "MonitorSeries")" title="New series monitor"><i class="bi bi-plus-square"></i></a>
</div>

@if (Model.Series.Any())
{
    @foreach (var type in annotationTypes)
    {
        if (Model.Series.Any(x => ((int)x.MonitorType).ToString() == type.Value))
        {
            <div>
                <h4>
                    Monitor type
                    <small class="text-muted">@type.Text</small>
                </h4>
            </div>
            <table class="table table-hover mt-3 table-dark">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Source</th>
                        <th scope="col">Description</th>
                        <th scope="col" title="The amount of latest minutes to be used in anomaly detection">Steps</th>
                        <th scope="col">Sensitivity</th>
                        <th scope="col" title="The value that below it, you will not be notified if any anomaly is detected">Lower limit</th>
                        <th scope="col" title="The value that above it, you will not be notified if any anomaly is detected">Upper limit</th>
                        <th scope="col" title="Do not produce alert within given minutes from the last alert in this series">No alert for</th>
                        <th scope="col">Aggregation</th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Series.Where(x => ((int)x.MonitorType).ToString() == type.Value))
                    {
                        var graylogUrl = $"{item.MonitorSource.Source.Trim('/')}/search?q={HttpUtility.UrlEncode(item.Query)}";
                        
                        <tr>
                            <th scope="row" title="@item.Query"><a href="@graylogUrl" style="text-decoration: none;" target="_blank">@item.Name</a></th>
                            <td>@item.MonitorSource.Name</td>
                            <td>@item.Description</td>
                            <td>@item.MinuteDurationForAnomalyDetection</td>
                            <td>@item.Sensitivity</td>
                            <td>@item.LowerLimitToDetect</td>
                            <td>@item.UpperLimitToDetect</td>
                            <td>@item.DoNotAlertAgainWithinMinutes</td>
                            <td>@(item.Aggregation + (string.IsNullOrWhiteSpace(item.Field) ? "" : $"({item.Field})"))</td>
                            <td>
                                <a type="button" title="Preview" class="btn btn-secondary btn-sm" href="@Url.Action("Preview", "MonitorSeries", new { id = item.ID })"><i class="bi bi-search"></i></a>
                            </td>
                            <td>
                                <a type="button" title="Edit" class="btn btn-primary btn-sm" href="@Url.Action("Edit", "MonitorSeries", new { id = item.ID })"><i class="bi bi-pencil-square"></i></a>
                            </td>
                            <td>
                                <a type="button" title="Clear data" class="btn btn-danger btn-sm" href="javascript:deleteSeriesData(@item.ID)"><i class="bi bi-x-circle"></i></a>
                            </td>
                            <td>
                                <a type="button" title="Delete" class="btn btn-danger btn-sm" href="@Url.Action("Delete", "MonitorSeries", new { id = item.ID })"><i class="bi bi-trash"></i></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
}
else
{
    <div class="text-muted">No series found</div>
}


<div class="modal fade" id="modal_upload_definitions" tabindex="-1" aria-labelledby="modal_upload_definitions_label" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modal_upload_definitions_label">Upload definitions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="message-text" class="col-form-label">The following json definitions will be appended to the existing.</label>
                        <textarea class="form-control modal-json-textarea" id="message-text" rows="20"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btn-upload-definitions">Upload</button>
            </div>
        </div>
    </div>
</div>

